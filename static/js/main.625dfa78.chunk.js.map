{"version":3,"sources":["Components/api/api.ts","Components/PreparedList/getPeople.ts","Components/Constants/constants.ts","Components/PeopleTableHead/PeopleTableHead.tsx","Components/PersonLink/PersonLink.tsx","Components/SortPatterns/SortPatterns.ts","Components/PeopleTableBody/PeopleTableBody.tsx","Components/SearchBar/SearchBar.tsx","Components/PeopleTable/PeopleTable.tsx","Components/PeoplePage/PeoplePage.tsx","App.tsx","index.tsx"],"names":["loadData","url","a","fetch","then","response","json","responsed","getPeople","loadedPeople","findParent","sex","parentName","find","parent","name","modifiedPeopleList","map","person","motherName","fatherName","mother","father","tableHead","PeopleTableHead","useState","currentParam","setCurrentParam","history","useHistory","location","useLocation","searchParams","URLSearchParams","search","style","background","head","styleActiveTitle","onClick","param","sortOrder","get","set","push","toString","sortedByParams","key","scope","src","alt","PersonLink","props","slug","to","sortPatterns","sortBy","pattern","personA","personB","localeCompare","born","died","PeopleTableBody","people","useParams","searchQuery","toLowerCase","sortByPatterns","renderedList","includedQuery","query","includes","filter","sortPattern","sort","reverse","colorBySex","showParent","parentSlug","className","classnames","color","SearchBar","value","setValue","delayedQueryUpdate","useCallback","func","delay","timerId","clearTimeout","args","setTimeout","debounce","searchedQuery","delete","type","placeholder","onChange","event","target","PeopleTable","borderCollapse","PeoplePage","setPeople","fetchData","arr","useEffect","Home","App","from","exact","path","component","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.625dfa78.chunk.js","sourcesContent":["export const loadData = async <T>(url: string): Promise<T[]> => {\n  const responsed = await fetch(url).then(response => response.json());\n\n  return responsed;\n};\n","import { loadData } from '../api/api';\nimport { PEOPLE_URL } from '../Constants/constants';\nimport { PersonType } from '../interfaces/interfaces';\n\nexport const getPeople = async (): Promise<PersonType[]> => {\n  const loadedPeople = await loadData<PersonType>(PEOPLE_URL);\n\n  const findParent = (sex: string, parentName: string): PersonType | null => {\n    return loadedPeople.find(parent => parent.sex === sex && parent.name === parentName) || null;\n  };\n\n  const modifiedPeopleList = loadedPeople.map(person => {\n    return {\n      ...person,\n      motherName: person.motherName || '',\n      fatherName: person.fatherName || '',\n      mother: findParent('f', person.motherName),\n      father: findParent('m', person.fatherName),\n    };\n  });\n\n  return modifiedPeopleList;\n};\n","export const PEOPLE_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n","import React, { FC, useState } from 'react';\nimport { useLocation, useHistory } from 'react-router';\n\nconst tableHead: string[] = [\n  'Name',\n  'Sex',\n  'Born',\n  'Died',\n];\n\nexport const PeopleTableHead: FC = () => {\n  const [currentParam, setCurrentParam] = useState('');\n  const history = useHistory();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n\n  const style = { background: '#a6a6d3' };\n\n  const sortedByParams = (param: string): void => {\n    setCurrentParam(param);\n    let sortOrder = (searchParams.get('sortOrder') === 'asc' ? 'desc' : 'asc');\n\n    if (searchParams.get('sortBy') !== param) {\n      sortOrder = 'asc';\n    }\n\n    searchParams.set('sortBy', param);\n    searchParams.set('sortOrder', sortOrder);\n    history.push({\n      search: searchParams.toString(),\n    });\n  };\n\n  return (\n    <thead>\n      <tr>\n        {tableHead.map(head => {\n          const styleActiveTitle = (currentParam === head ? style : {});\n\n          return (\n            <th\n              style={styleActiveTitle}\n              onClick={() => sortedByParams(head)}\n              key={head}\n              scope=\"col\"\n            >\n              {head}\n              <img\n                src=\"images/sort_both.png\"\n                alt=\"sorting arrows\"\n              />\n            </th>\n          );\n        })}\n        <th\n          scope=\"col\"\n        >\n          Mother\n        </th>\n        <th\n          scope=\"col\"\n        >\n          Father\n        </th>\n      </tr>\n    </thead>\n  );\n};\n","import React, { FC } from 'react';\nimport { NavLink } from 'react-router-dom';\n\ninterface PersonLinkProps {\n  slug: string;\n  name: string;\n}\n\nexport const PersonLink: FC<PersonLinkProps> = (props) => {\n  const { slug, name } = props;\n\n  return (\n    <NavLink\n      to={`/people/${slug}`}\n    >\n      {name}\n    </NavLink>\n  );\n};\n","import { PersonType } from '../interfaces/interfaces';\n\nexport const sortPatterns: SortPatternsType[] = [\n  {\n    sortBy: 'name',\n    pattern: (personA, personB) => {\n      return personA.name.localeCompare(personB.name);\n    },\n  },\n  {\n    sortBy: 'sex',\n    pattern: (personA, personB) => {\n      return personA.sex.localeCompare(personB.sex);\n    },\n  },\n  {\n    sortBy: 'born',\n    pattern: (personA, personB) => {\n      return personA.born - personB.born;\n    },\n  },\n  {\n    sortBy: 'died',\n    pattern: (personA, personB) => {\n      return personA.died - personB.died;\n    },\n  },\n];\n\ninterface SortPatternsCallBack {\n  (personA: PersonType, personB: PersonType): number;\n}\n\ninterface SortPatternsType {\n  sortBy: string;\n  pattern: SortPatternsCallBack;\n}\n","import React, { FC } from 'react';\nimport { useParams, useLocation } from 'react-router-dom';\nimport classnames from 'classnames';\n\nimport { PersonType } from '../interfaces/interfaces';\nimport { PersonLink } from '../PersonLink/PersonLink';\nimport { sortPatterns } from '../SortPatterns/SortPatterns';\n\ninterface Props {\n  people: PersonType[];\n}\n\nexport const PeopleTableBody: FC<Props> = (props) => {\n  const { people } = props;\n\n  const { slug } = useParams();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const searchQuery = searchParams.get('query');\n  const sortBy = searchParams.get('sortBy')?.toLowerCase();\n  const sortOrder = searchParams.get('sortOrder')?.toLowerCase();\n  const sortByPatterns = sortPatterns;\n\n  let renderedList = people;\n\n  function includedQuery(name: string, query: string): boolean {\n    return name.toLowerCase().includes(query.toLowerCase());\n  }\n\n  if (searchQuery) {\n    renderedList = people.filter(person => {\n      const { name, motherName, fatherName } = person;\n\n      return includedQuery(name, searchQuery)\n      || includedQuery(motherName, searchQuery)\n      || includedQuery(fatherName, searchQuery);\n    });\n  }\n\n  const sortPattern = sortByPatterns.find(pattern => pattern.sortBy === sortBy);\n\n  if (sortPattern) {\n    renderedList.sort(sortPattern.pattern);\n  }\n\n  if (sortOrder === 'desc') {\n    renderedList.reverse();\n  }\n\n  return (\n    <tbody>\n      {renderedList.map(person => {\n        const colorBySex = person.sex === 'm';\n\n        const showParent = (\n          parentSlug: string | undefined, parentName: string,\n        ): React.ReactNode => {\n          return parentSlug\n            ? (\n              <PersonLink\n                slug={parentSlug}\n                name={parentName}\n              />\n            )\n            : parentName;\n        };\n\n        return (\n          <tr\n            key={person.slug}\n            className={classnames({\n              'table-active': (person.slug === slug),\n            })}\n          >\n            <th scope=\"row\">\n              <PersonLink\n                slug={person.slug}\n                name={person.name}\n              />\n            </th>\n            <td\n              style={{ color: colorBySex ? 'blue' : 'red' }}\n            >\n              {person.sex}\n            </td>\n            <td>{person.born}</td>\n            <td>{person.died}</td>\n            <td>\n              {showParent(person.mother?.slug, person.motherName)}\n            </td>\n            <td>\n              {showParent(person.father?.slug, person.fatherName)}\n            </td>\n          </tr>\n        );\n      })}\n    </tbody>\n  );\n};\n","import React, { FC, useState, useCallback } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\n\ntype handleQueryUpdateType = (event: React.ChangeEvent<HTMLInputElement>) => void;\n\nexport const SearchBar: FC = () => {\n  const history = useHistory();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const query = searchParams.get('query') || '';\n  const [value, setValue] = useState<string>(query);\n\n  const debounce = (func: (s: string) => void, delay: number) => {\n    let timerId: number;\n\n    return (...args: string []) => {\n      clearTimeout(timerId);\n\n      timerId = setTimeout(func, delay, ...args);\n    };\n  };\n\n  const queryUpdate = (searchedQuery: string) => {\n    if (searchedQuery) {\n      searchParams.set('query', searchedQuery);\n    } else {\n      searchParams.delete('query');\n    }\n\n    history.push({\n      search: searchParams.toString(),\n    });\n  };\n\n  const delayedQueryUpdate = useCallback(\n    debounce(queryUpdate, 500), [],\n  );\n\n  const handleQueryUpdate: handleQueryUpdateType = (event) => {\n    delayedQueryUpdate(event.target.value);\n    setValue(event.target.value);\n  };\n\n  return (\n    <form className=\"form-inline my-2 my-lg-0 ml-2\">\n      <input\n        className=\"form-control mr-sm-2\"\n        type=\"text\"\n        value={value}\n        placeholder=\"Search\"\n        onChange={handleQueryUpdate}\n      />\n    </form>\n  );\n};\n","import React, { FC } from 'react';\nimport { PersonType } from '../interfaces/interfaces';\nimport { PeopleTableHead } from '../PeopleTableHead/PeopleTableHead';\nimport { PeopleTableBody } from '../PeopleTableBody/PeopleTableBody';\nimport { SearchBar } from '../SearchBar/SearchBar';\n\ninterface PeopleTableProps {\n  people: PersonType[];\n}\n\nexport const PeopleTable: FC<PeopleTableProps> = (props) => {\n  const { people } = props;\n\n  return (\n    <>\n      <SearchBar />\n      <table\n        className=\"table table-hover\"\n        style={{ borderCollapse: 'collapse' }}\n      >\n        <PeopleTableHead />\n        <PeopleTableBody people={people} />\n      </table>\n    </>\n  );\n};\n","import React, { FC, useState, useEffect } from 'react';\nimport { getPeople } from '../PreparedList/getPeople';\nimport { PeopleTable } from '../PeopleTable/PeopleTable';\nimport { PersonType } from '../interfaces/interfaces';\n\nexport const PeoplePage: FC = () => {\n  const [people, setPeople] = useState<PersonType[]>([]);\n\n  const fetchData = async () => {\n    const arr = await getPeople();\n\n    setPeople(arr);\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  return <PeopleTable people={people} />;\n};\n","import React, { FC } from 'react';\nimport {\n  Route,\n  Switch,\n  NavLink,\n  Redirect,\n} from 'react-router-dom';\n\nimport './App.css';\nimport { PeoplePage } from './Components/PeoplePage/PeoplePage';\n\nconst Home = () => <h1>Home page</h1>;\n\nconst App: FC = () => {\n  return (\n    <>\n      <NavLink to=\"/\" className=\"btn btn-primary m-2\">Home</NavLink>\n      <NavLink to=\"/people\" className=\"btn btn-primary m-2\">People</NavLink>\n      <Switch>\n        <Redirect from=\"/home\" to=\"/\" />\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/people/:slug?\" component={PeoplePage} />\n        <Route render={() => <h1>Page not found</h1>} />\n      </Switch>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}