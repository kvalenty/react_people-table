{"version":3,"sources":["Components/api/api.ts","Components/PreparedList/getPeople.ts","Components/Constants/constants.ts","Components/PeopleTableHead/PeopleTableHead.tsx","Components/PersonLink/PersonLink.tsx","Components/PeopleTableBody/PeopleTableBody.tsx","Components/SearchBar/SearchBar.tsx","Components/PeopleTable/PeopleTable.tsx","Components/PeoplePage/PeoplePage.tsx","App.tsx","index.tsx"],"names":["loadData","url","a","fetch","then","response","json","responsed","getPeople","loadedPeople","findParent","sex","parentName","find","parent","name","modifiedPeopleList","map","person","motherName","fatherName","mother","father","tableHead","PeopleTableHead","head","key","scope","PersonLink","props","slug","to","PeopleTableBody","people","useParams","location","useLocation","searchParams","URLSearchParams","search","get","renderedList","includedQuery","query","toLowerCase","includes","filter","colorBySex","className","classnames","style","color","born","died","SearchBar","history","useHistory","useState","value","setValue","type","placeholder","onChange","event","target","set","push","toString","PeopleTable","borderCollapse","PeoplePage","setPeople","fetchData","arr","useEffect","Home","App","from","exact","path","component","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.ddc7e861.chunk.js","sourcesContent":["export const loadData = async <T>(url: string): Promise<T[]> => {\n  const responsed = await fetch(url).then(response => response.json());\n\n  return responsed;\n};\n","import { loadData } from '../api/api';\nimport { PEOPLE_URL } from '../Constants/constants';\nimport { PersonType } from '../interfaces/interfaces';\n\nexport const getPeople = async (): Promise<PersonType[]> => {\n  const loadedPeople = await loadData<PersonType>(PEOPLE_URL);\n\n  const findParent = (sex: string, parentName: string): PersonType | null => {\n    return loadedPeople.find(parent => parent.sex === sex && parent.name === parentName) || null;\n  };\n\n  const modifiedPeopleList = loadedPeople.map(person => {\n    return {\n      ...person,\n      motherName: person.motherName || '',\n      fatherName: person.fatherName || '',\n      mother: findParent('f', person.motherName),\n      father: findParent('m', person.fatherName),\n    };\n  });\n\n  return modifiedPeopleList;\n};\n","export const PEOPLE_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n","import React, { FC } from 'react';\n\nconst tableHead: string[] = [\n  'Name',\n  'Sex',\n  'Born',\n  'Died',\n  'Mother',\n  'Father',\n];\n\nexport const PeopleTableHead: FC = () => {\n  return (\n    <thead>\n      <tr>\n        {tableHead.map(head => {\n          return <th key={head} scope=\"col\">{head}</th>;\n        })}\n      </tr>\n    </thead>\n  );\n};\n","import React, { FC } from 'react';\nimport { NavLink } from 'react-router-dom';\n\ninterface PersonLinkProps {\n  slug: string;\n  name: string;\n}\n\nexport const PersonLink: FC<PersonLinkProps> = (props) => {\n  const { slug, name } = props;\n\n  return (\n    <NavLink\n      to={`/people/${slug}`}\n    >\n      {name}\n    </NavLink>\n  );\n};\n","import React, { FC } from 'react';\nimport { useParams, useLocation } from 'react-router-dom';\nimport classnames from 'classnames';\n\nimport { PersonType } from '../interfaces/interfaces';\nimport { PersonLink } from '../PersonLink/PersonLink';\n\ninterface Props {\n  people: PersonType[];\n}\n\nexport const PeopleTableBody: FC<Props> = (props) => {\n  const { people } = props;\n\n  const { slug } = useParams();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search).get('query');\n\n  let renderedList = people;\n\n  function includedQuery(name: string, query: string): boolean {\n    return name.toLowerCase().includes(query.toLowerCase());\n  }\n\n  if (searchParams) {\n    renderedList = people.filter(person => {\n      const { name, motherName, fatherName } = person;\n\n      return includedQuery(name, searchParams)\n      || includedQuery(motherName, searchParams)\n      || includedQuery(fatherName, searchParams);\n    });\n  }\n\n  return (\n    <tbody>\n      {renderedList.map(person => {\n        const colorBySex = person.sex === 'm';\n\n        return (\n          <tr\n            key={person.slug}\n            className={classnames({\n              'table-active': (person.slug === slug),\n            })}\n          >\n            <th scope=\"row\">\n              <PersonLink\n                slug={person.slug}\n                name={person.name}\n              />\n            </th>\n            <td\n              style={{ color: colorBySex ? 'blue' : 'red' }}\n            >\n              {person.sex}\n            </td>\n            <td>{person.born}</td>\n            <td>{person.died}</td>\n            <td>\n              {person.mother?.slug\n                ? (\n                  <PersonLink\n                    slug={person.mother?.slug}\n                    name={person.motherName}\n                  />\n                )\n                : person.motherName}\n            </td>\n            <td>\n              {person.father?.slug\n                ? (\n                  <PersonLink\n                    slug={person.father?.slug}\n                    name={person.fatherName}\n                  />\n                )\n                : person.fatherName}\n            </td>\n          </tr>\n        );\n      })}\n    </tbody>\n  );\n};\n","import React, { FC, useState } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\n// import { NavLink } from 'react-router-dom';\n\nexport const SearchBar: FC = () => {\n  const history = useHistory();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n\n  const [value, setValue] = useState<string>(searchParams.get('query') || '');\n\n  return (\n    <form className=\"form-inline my-2 my-lg-0 ml-2\">\n      <input\n        className=\"form-control mr-sm-2\"\n        type=\"text\"\n        value={value}\n        placeholder=\"Search\"\n        onChange={(event) => {\n          setValue(event.target.value);\n          searchParams.set('query', event.target.value);\n          history.push({\n            search: searchParams.toString(),\n          });\n        }}\n      />\n    </form>\n  );\n};\n","import React, { FC } from 'react';\nimport { PersonType } from '../interfaces/interfaces';\nimport { PeopleTableHead } from '../PeopleTableHead/PeopleTableHead';\nimport { PeopleTableBody } from '../PeopleTableBody/PeopleTableBody';\nimport { SearchBar } from '../SearchBar/SearchBar';\n\ninterface PeopleTableProps {\n  people: PersonType[];\n}\n\nexport const PeopleTable: FC<PeopleTableProps> = (props) => {\n  const { people } = props;\n\n  return (\n    <>\n      <SearchBar />\n      <table\n        className=\"table table-hover\"\n        style={{ borderCollapse: 'collapse' }}\n      >\n        <PeopleTableHead />\n        <PeopleTableBody people={people} />\n      </table>\n    </>\n  );\n};\n","import React, { FC, useState, useEffect } from 'react';\nimport { getPeople } from '../PreparedList/getPeople';\nimport { PeopleTable } from '../PeopleTable/PeopleTable';\nimport { PersonType } from '../interfaces/interfaces';\n\nexport const PeoplePage: FC = () => {\n  const [people, setPeople] = useState<PersonType[]>([]);\n\n  const fetchData = async () => {\n    const arr = await getPeople();\n\n    setPeople(arr);\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  return <PeopleTable people={people} />;\n};\n","import React, { FC } from 'react';\nimport {\n  Route,\n  Switch,\n  NavLink,\n  Redirect,\n} from 'react-router-dom';\n\nimport './App.css';\nimport { PeoplePage } from './Components/PeoplePage/PeoplePage';\n\nconst Home = () => <h1>Home page</h1>;\n\nconst App: FC = () => {\n  return (\n    <>\n      <NavLink to=\"/\" className=\"btn btn-primary m-2\">Home</NavLink>\n      <NavLink to=\"/people\" className=\"btn btn-primary m-2\">People</NavLink>\n      <Switch>\n        <Redirect from=\"/home\" to=\"/\" />\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/people/:slug?\" component={PeoplePage} />\n        <Route render={() => <h1>Page not found</h1>} />\n      </Switch>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}